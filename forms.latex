\documentclass{beamer}

\mode<presentation>
{
  \usetheme{Singapore}
  % \setbeamercovered{transparent}
}


\usepackage[utf8]{inputenc}

% \usepackage{times}

% For pygmentize
\usepackage{fancyvrb}
\usepackage{color}

\input{styles}


\title[Forms in python]
{Challenges and how they are addressed}

\author[]{Szymon Py≈ºalski}

\institute{STX Next python experts}

\date {PyConPL 2011}


\begin{document}

\begin{frame}
  \titlepage 
  \url{http://github.com/zefciu/forms-in-python/}
\end{frame}

\begin{frame}{Outline}
  \tableofcontents
  %\pausesections
\end{frame}


\section{About form libraries}

\begin{frame}{Why are they important?}

  \begin{itemize}
  \item
    They are ubiquitus
  \pause
  \item
    Closest to the user
  \pause
  \item
    Our first line of defense
    \pause
  \item
    Boilerplate and repetition removement
  \end{itemize}
\end{frame}

\begin{frame}{Scope of features}
  \begin{itemize}
  \item
    User input handling
    \pause
    \begin{itemize}
        \item
            Type coercion
            \pause
        \item
            Validation
    \end{itemize}
    \pause
  \item
    Widget generation
    \pause
  \item
    Data schema reflection
  \end{itemize}
\end{frame}

\begin{frame}{Challenges}
  \begin{itemize}
  \item
    Flexible but not a feature creep
    \pause
  \item
    Allow reflection but don't bind user's hands
    \pause
  \item
    Portable but allow to use specific features
  \end{itemize}
\end{frame}

\section{Solutions we have}

\begin{frame}{FormEncode}
    \begin{itemize}
    \item
        By: Ian Bicking
    \pause
    \item
        Minimalist: only validation, coercion, html-filling
    \pause
    \item
        Was recommended by pylons book
    \pause
    \item
        The idea of schema reflection was \emph{rejected}!
    \end{itemize}
\end{frame}

\begin{frame}{Django Forms}
    \begin{itemize}
    \item
        Their second attempt
    \pause
    \item
        Plays best in django framework
    \pause
    \item
        Reflection of django ORM
    \end{itemize}
\end{frame}

\begin{frame}{Django example}
\small{
\input{django}
}
\end{frame}

\begin{frame}{Sprox}
    \begin{itemize}
    \item
        Combination of FormEncode and ToscaWidgets
    \pause
    \item
        Extendable
    \pause
    \item
        Lots of code...
    \end{itemize}
\end{frame}

\begin{frame}{Sprox example}
\tiny{
\input{sprox}
}
\end{frame}

\begin{frame}{FormAlchemy}
    \begin{itemize}
    \item
        Built upon idea of schema reflection
    \pause
    \item
        Generates HTML forms and tables
    \pause
    \item
        Type coercion and widget rendering done in \emph{renderers}
    \end{itemize}
\end{frame}

\begin{frame}{FormAlchemy example}
\small{
\input{formalchemy}
}
\end{frame}

\begin{frame}{formish \& deform}
    \begin{itemize}
    \item
        Don't do reflection
    \pause
    \item
        Strong separation between schema and form
    \pause
    \item
        The schema can also be used for other data-parsing purposes
    \end{itemize}
\end{frame}

\begin{frame}{deform example}
\small{
\input{deform}
}
\end{frame}

\section{Anthrax - a proposal}
\begin{frame}{Basic ideas of anthrax}
    \begin{itemize}
    \item
        Highly modular. If you create a dependency, create a module
        \pause
    \item
        There are 4 layers: fields, widgets, views and templates
        \pause
    \item
        Use entry-points for to register what we have
    \end{itemize}
\end{frame}

\begin{frame}{Building bricks}
    \begin{description}
    \item[Form]
        A collection of subcontainers and fields
        \pause
    \item[Field]
        Knows how to validate and coerce a particular data type
        \pause
    \item[Widget]
        A suggestion about presentation
        \pause
    \item[Validator]
        Works on a form or container, ad-hoc or generic
        \pause
    \end{description}
\end{frame}

\begin{frame}{Building bricks - continued}
    \begin{description}
    \item[Frontend]
        A system to render the form in some way (pure HTML, dojo etc.)
        \pause
    \item[View]
        Frontend-dependent object that knows how to render a widget
        \pause
    \item[Template]
        Highly recommended to use those
        \pause
    \end{description}
\end{frame}

\begin{frame}{Building bricks relations}
    \begin{itemize}
    \item
        A \emph{form} has some \emph{fields}. It can be rendered into
        a \emph{frontend}.
        \pause
    \item
        A \emph{field} has a list of \emph{widgets} that can handle it.
        \pause
    \item
        A \emph{frontend} handles some \emph{widgets} by assigning \emph{views}
        to render them. It negotiates with \emph{fields} to use the best
        \emph{widget}.
        \pause
    \end{itemize}
\end{frame}

\begin{frame}{A code example}
\small{
\input{anthrax}
}
\end{frame}

\section{Questions}
\begin{frame}{Questions}
\huge{
Questions?
}
\end{frame}
\end{document}
